# .github/workflows/update-seanime.yml
name: Update seanime version (using pre-built binary)

on:
  schedule:
    # Runs hourly (adjust as needed, e.g., '0 8 * * *' for daily at 8 AM UTC)
    - cron: '0 * * * *'
  workflow_dispatch: # Allows manual triggering

jobs:
  update-seanime:
    runs-on: ubuntu-latest
    # Prevent multiple runs for the same commit/event
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch all history for accurate version comparison and branch operations
          fetch-depth: 0

      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          # Use nixpkgs-unstable channel for potentially newer tools
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Install dependencies (using Nix)
        run: |
          # Install necessary tools using nix profile for better isolation
          # Added nix-prefetch-url tool
          nix profile install nixpkgs#gh nixpkgs#nix-prefetch-url nixpkgs#jq nixpkgs#gnused nixpkgs#gnugrep

          # Add Nix binaries to PATH for subsequent steps
          echo "$HOME/.nix-profile/bin" >> $GITHUB_PATH
          # Verify installation
          gh --version
          nix-prefetch-url --version || true 
          jq --version
          sed --version || true 
          grep --version || true 

      - name: Get current and latest versions
        id: versions
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          CURRENT_VERSION_RAW=$(grep -oP 'version\s*=\s*"\K[^"]+' seanime-pkg.nix || echo "0.0.0")
          CURRENT_VERSION_CLEAN="${CURRENT_VERSION_RAW#v}"
          echo "Current version found in seanime-pkg.nix (raw): $CURRENT_VERSION_RAW"
          echo "Current version (cleaned): $CURRENT_VERSION_CLEAN"
          echo "CURRENT_VERSION_CLEAN=$CURRENT_VERSION_CLEAN" >> $GITHUB_ENV # Store cleaned version

          echo "Fetching all releases from GitHub API..."
          RELEASES=$(gh api repos/5rahim/seanime/releases)

          if [ -z "$RELEASES" ]; then
             echo "::error::Failed to fetch releases from GitHub API."
             exit 1
          fi

          LATEST_TAG=$(echo "$RELEASES" | jq -r '[.[] | select(.prerelease == false and .draft == false)][0].tag_name')

          if [ -z "$LATEST_TAG" ] || [ "$LATEST_TAG" == "null" ]; then
            echo "::error::Could not extract valid release tag from GitHub API response."
            echo "API Response: $RELEASES"
            exit 1
          fi

          # Clean the latest tag name (remove leading 'v')
          LATEST_VERSION_CLEAN="${LATEST_TAG#v}"

          echo "Latest tag from GitHub API: $LATEST_TAG"
          echo "Latest version (cleaned): $LATEST_VERSION_CLEAN"
          # Store both the original tag and the cleaned version
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
          echo "LATEST_VERSION_CLEAN=$LATEST_VERSION_CLEAN" >> $GITHUB_ENV

          # Compare cleaned versions
          if [ "$CURRENT_VERSION_CLEAN" = "$LATEST_VERSION_CLEAN" ]; then
            echo "seanime is up-to-date ($CURRENT_VERSION_CLEAN)."
            echo "UPDATE_NEEDED=false" >> $GITHUB_ENV
          else
            echo "Update needed: $CURRENT_VERSION_CLEAN -> $LATEST_VERSION_CLEAN"
            echo "UPDATE_NEEDED=true" >> $GITHUB_ENV
          fi

      - name: Check for existing Pull Request
        id: check_pr
        # Only run if an update is potentially needed
        if: env.UPDATE_NEEDED == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Define branch name using the cleaned version
          BRANCH_NAME: "update-seanime-${{ env.LATEST_VERSION_CLEAN }}"
        run: |
          echo "Checking for existing open PR for branch: $BRANCH_NAME"
          # Use gh pr list to find open PRs targeting the default branch from the head branch
          EXISTING_PR_URL=$(gh pr list --head "$BRANCH_NAME" --base main --state open --json url --jq '.[0].url')

          if [ -n "$EXISTING_PR_URL" ]; then
            echo "::warning::An open pull request already exists for branch $BRANCH_NAME: $EXISTING_PR_URL"
            echo "Skipping update and PR creation steps."
            echo "PR_EXISTS=true" >> $GITHUB_ENV
          else
            echo "No existing open PR found for branch $BRANCH_NAME."
            echo "PR_EXISTS=false" >> $GITHUB_ENV
          fi

      # --- MODIFIED STEP: Uses nix-prefetch-url ---
      - name: Update version and hash (using pre-built binary URL)
        # Only run if update is needed AND no existing PR was found
        if: env.UPDATE_NEEDED == 'true' && env.PR_EXISTS == 'false'
        env:
           # Pass the original tag and the cleaned version
           LATEST_TAG: ${{ env.LATEST_TAG }}
           LATEST_VERSION_CLEAN: ${{ env.LATEST_VERSION_CLEAN }}
           # Define target architecture (ADJUST IF NEEDED)
           TARGET_ARCH: "Linux_x86_64"
        run: |
          echo "Updating seanime-pkg.nix to version $LATEST_VERSION_CLEAN (using pre-built binary)"

          # Update version string using the cleaned version
          sed -i -E "s@(version\s*=\s*\")[^\"]+@\1${LATEST_VERSION_CLEAN}@" seanime-pkg.nix
          echo "Version updated in seanime-pkg.nix."

          # Construct the URL for the pre-built binary
          ASSET_FILENAME="seanime-${LATEST_VERSION_CLEAN}_${TARGET_ARCH}.tar.gz"
          BINARY_URL="https://github.com/5rahim/seanime/releases/download/${LATEST_TAG}/${ASSET_FILENAME}"
          echo "Target binary URL: $BINARY_URL"

          # Use nix-prefetch-url to get the hash of the binary
          echo "Running: nix-prefetch-url $BINARY_URL"
          PREFETCH_OUTPUT=$(nix-prefetch-url "$BINARY_URL" 2>&1)
          EXIT_CODE=$?

          if [ $EXIT_CODE -ne 0 ]; then
            echo "::error::nix-prefetch-url failed with exit code $EXIT_CODE"
            echo "Output: $PREFETCH_OUTPUT"
            exit 1
          fi

          # Assume the hash is the last line of successful output
          NEW_HASH=$(echo "$PREFETCH_OUTPUT" | tail -n 1)
          echo "Prefetch output (raw):"
          echo "$PREFETCH_OUTPUT"
          echo "Extracted hash: $NEW_HASH"

          # Basic Hash Validation
          if [ -z "$NEW_HASH" ]; then
              echo "::error::Failed to extract hash from nix-prefetch-url output."
              exit 1
          fi
          # Add more specific checks if needed based on nix-prefetch-url output format
          echo "Proceeding with extracted hash: $NEW_HASH"

          # Update hash in seanime-pkg.nix
          echo "Updating hash in seanime-pkg.nix to $NEW_HASH"
          sed -i -E "s|(hash\s*=\s*\")[^\"]+(\";)|\1${NEW_HASH}\2|" seanime-pkg.nix

          # Verification
          # Adjust grep pattern if hash doesn't include quotes or ; in your file
          if grep -qF "hash = \"$NEW_HASH\";" seanime-pkg.nix; then
            echo "Successfully updated hash in seanime-pkg.nix"
          else
            echo "::error::Failed to verify hash update in seanime-pkg.nix using sed."
            echo "Expected hash: $NEW_HASH"
            echo "File content after attempted update:"
            cat seanime-pkg.nix
            exit 1
          fi

          # IMPORTANT REMINDER FOR USER:
          echo "::warning::CRITICAL: Remember to manually update seanime-pkg.nix to use 'fetchurl' with the URL '$BINARY_URL' and the correct hash type (e.g., sha256 or hash = \"sha256-...\") instead of 'fetchFromGitHub' for this change to be effective!"

      - name: Commit and push changes
        # Only run if update is needed AND no existing PR was found
        if: env.UPDATE_NEEDED == 'true' && env.PR_EXISTS == 'false'
        env:
           # Pass CLEAN version and define branch name using CLEAN version
           LATEST_VERSION_CLEAN: ${{ env.LATEST_VERSION_CLEAN }}
           BRANCH_NAME: "update-seanime-${{ env.LATEST_VERSION_CLEAN }}"
        run: |
          echo "Configuring Git user..."
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          echo "Checking out branch $BRANCH_NAME..."
          git checkout -B "$BRANCH_NAME"

          echo "Adding changes..."
          git add seanime-pkg.nix

          if git diff --staged --quiet; then
             echo "No changes detected in seanime-pkg.nix after update. Skipping commit and push."
             echo "CHANGES_PUSHED=false" >> $GITHUB_ENV
          else
             echo "Committing changes..."
             # Use CLEAN version in commit message
             git commit -m "feat: Update seanime to ${LATEST_VERSION_CLEAN} (pre-built)" -m "Automatic update via GitHub Actions using pre-built binary hash."

             echo "Pushing changes to origin/$BRANCH_NAME..."
             git push -f origin "$BRANCH_NAME"
             echo "Changes pushed successfully."
             echo "CHANGES_PUSHED=true" >> $GITHUB_ENV
          fi

      - name: Create Pull Request
        # Only run if update is needed, no existing PR was found, AND changes were pushed
        if: env.UPDATE_NEEDED == 'true' && env.PR_EXISTS == 'false' && env.CHANGES_PUSHED == 'true'
        uses: actions/github-script@v7
        env:
          # Pass necessary CLEAN versions and branch name to the script context
          CURRENT_VERSION_CLEAN: ${{ env.CURRENT_VERSION_CLEAN }}
          LATEST_VERSION_CLEAN: ${{ env.LATEST_VERSION_CLEAN }}
          BRANCH_NAME: "update-seanime-${{ env.LATEST_VERSION_CLEAN }}"
        with:
          # Grant the script permission to create PRs
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Use the CLEANED versions passed from the environment
            const { CURRENT_VERSION_CLEAN, LATEST_VERSION_CLEAN, BRANCH_NAME } = process.env;
            if (!LATEST_VERSION_CLEAN || !BRANCH_NAME || !CURRENT_VERSION_CLEAN) {
              core.setFailed('Required environment variables (CURRENT_VERSION_CLEAN, LATEST_VERSION_CLEAN, BRANCH_NAME) were not set for PR creation.');
              return;
            }

            const baseBranch = 'main'; // <<< IMPORTANT: Change this if your default branch is not 'main' >>>
            // Use CLEAN version in title and body
            const title = `feat: Update seanime to ${LATEST_VERSION_CLEAN} (pre-built)`;
            const body = `This PR automatically updates the \`seanime\` package from version \`${CURRENT_VERSION_CLEAN}\` to \`${LATEST_VERSION_CLEAN}\` using the hash of the pre-built binary.

            **IMPORTANT:** This requires the \`seanime-pkg.nix\` file to use \`Workspaceurl\` instead of \`WorkspaceFromGitHub\`. Please ensure this change is made manually if it hasn't been already.

            Changes generated by GitHub Actions workflow.`;
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            console.log(`Attempting to create Pull Request:`);
            console.log(`  Title: ${title}`);
            console.log(`  Head: ${owner}:${BRANCH_NAME}`);
            console.log(`  Base: ${baseBranch}`);

            try {
              const { data: existingPulls } = await github.rest.pulls.list({
                owner,
                repo,
                state: 'open',
                head: `${owner}:${BRANCH_NAME}`, // Branch name derived from CLEAN version
                base: baseBranch,
              });

              if (existingPulls.length > 0) {
                console.log(`::warning::Pull request from ${BRANCH_NAME} to ${baseBranch} already exists: ${existingPulls[0].html_url}`);
                console.log('Skipping new PR creation.');
              } else {
                console.log('No existing open PR found. Creating a new one...');
                const { data: pullRequest } = await github.rest.pulls.create({
                  owner,
                  repo,
                  title,
                  head: BRANCH_NAME, // Branch name derived from CLEAN version
                  base: baseBranch,
                  body: body,
                });
                console.log(`Pull request created successfully: ${pullRequest.html_url}`);
              }
            } catch (error) {
               if (error.message.includes("No commit found for the ref") || error.message.includes("422")) {
                  console.warn(`Could not create PR. This might be because the branch '${BRANCH_NAME}' wasn't pushed (no changes detected?) or another issue occurred. Error: ${error.message}`);
               } else {
                  core.setFailed(`Failed to create or check for pull request for branch ${BRANCH_NAME}: ${error.message}`);
               }
            }